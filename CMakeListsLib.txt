# =========================================================================
# Add the libraries
# =========================================================================

# Set directory to compile external libraries
IF(LIBS_USE_MPI)
  SET(LIBS_EXTERNAL_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/share/${CMAKE_Fortran_COMPILER_ID}-MPI)
ELSE()
  SET(LIBS_EXTERNAL_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/share/${CMAKE_Fortran_COMPILER_ID})
ENDIF()
MARK_AS_ADVANCED(FORCE LIBS_EXTERNAL_LIB_DIR)


# Check whether origin is point to Github or IAG
EXECUTE_PROCESS(COMMAND git ls-remote --get-url OUTPUT_VARIABLE GIT_ORIGIN)

# Origin pointing to IAG
IF("${GIT_ORIGIN}" MATCHES ".iag.uni-stuttgart.de")
  # Checked out using SSH
  IF("${GIT_ORIGIN}" MATCHES "^git@")
    SET(LIBS_DLPATH "git@gitlab.iag.uni-stuttgart.de:")
  # Checked out using HTTPS
  # IF("${GIT_ORIGIN}" MATCHES "^https@")
  ELSE()
    SET(LIBS_DLPATH "https://gitlabext.iag.uni-stuttgart.de/")
  ENDIF()
# Origin pointing to ILA
ELSEIF("${GIT_ORIGIN}" MATCHES "ila.uni-stuttgart.de")
  # Checked out using SSH
  IF("${GIT_ORIGIN}" MATCHES "^git@")
    SET(LIBS_DLPATH "git@gitlab.ila.uni-stuttgart.de:")
  # Checked out using HTTPS
  # IF("${GIT_ORIGIN}" MATCHES "^https@")
  ELSE()
    SET(LIBS_DLPATH "https://gitlab.ila.uni-stuttgart.de/")
  ENDIF()
# Fallback to IAG libs
ELSE()
  SET(LIBS_DLPATH "https://gitlabext.iag.uni-stuttgart.de/")
ENDIF()


# =========================================================================
# MPI
# =========================================================================
OPTION(LIBS_USE_MPI "Compile SINGLE or MPI version" ON)
IF(LIBS_USE_MPI)
  FIND_PACKAGE(MPI REQUIRED)
  IF (NOT MPI_Fortran_NO_INTERROGATE)
    FOREACH(DIR ${MPI_INCLUDE_PATH})
      INCLUDE_DIRECTORIES(${DIR})
    ENDFOREACH()
    FOREACH(DIR ${MPI_Fortran_INCLUDE_PATH})
      INCLUDE_DIRECTORIES(${DIR})
    ENDFOREACH()
    LIST(APPEND linkedlibs ${MPI_Fortran_LIBRARIES})
  ENDIF()
  MARK_AS_ADVANCED(FORCE MPI_LIBRARY MPI_EXTRA_LIBRARY)
  MESSAGE(STATUS "Building HOPR with MPI")
  MESSAGE(STATUS "MPI Compiler: " ${MPI_Fortran_COMPILER})
  # Detect HPE MPT implementation since if changes some MPI definitions
  IF("${MPI_Fortran_COMPILER}" MATCHES "mpt")
    ADD_DEFINITIONS(-DLIBS_MPT=1)
  ENDIF()
  ADD_DEFINITIONS(-DUSE_MPI=1)
ELSE()
  ADD_DEFINITIONS(-DUSE_MPI=0)
ENDIF()


# =========================================================================
# HDF5 library
# =========================================================================
SET(LIBS_BUILD_HDF5 ON CACHE BOOL "Compile and build hdf5 library")

# Set type of library to look up, STATIC/SHARED
SET(LIB_TYPE STATIC)
STRING(TOLOWER ${LIB_TYPE} SEARCH_TYPE)

# We support two methods for finding HDF5:
# a) the version built using configure scripts and b) using CMake
# Support for CMake-built HDF5 is limited to version >1.10.2 which require at CMake >3.10

# Use system HDF5
IF(NOT LIBS_BUILD_HDF5)
  # Try to find the CMake version
  SET(LIBS_HDF5_CMAKE TRUE)
  FIND_PACKAGE(HDF5 NAMES hdf5 COMPONENTS C Fortran ${SEARCH_TYPE} QUIET PATH_SUFFIXES share/cmake )
  # CMake version found
  IF (HDF5_FOUND)
    IF(${CMAKE_VERSION} VERSION_LESS "3.10.0")
      MESSAGE (WARNING "HDF5 built with CMake was found! This feature is only supported for CMake 3.10+ and HDF5 1.10.2+ !")
    ENDIF()
    MESSAGE (STATUS "HDF5 C libs:${HDF5_FOUND} static:${HDF5_static_C_FOUND} and shared:${HDF5_shared_C_FOUND}")
    MESSAGE (STATUS "HDF5 Fortran libs: static:${HDF5_static_Fortran_FOUND} and shared:${HDF5_shared_Fortran_FOUND}")
    MESSAGE (STATUS "h5diff found:${HDF5_DIFF_EXECUTABLE}")
  ELSE()
    # Try to find the configure version
    SET(LIBS_HDF5_CMAKE FALSE)
    FIND_PACKAGE(HDF5 COMPONENTS C Fortran)
    # In case CMake did not find HDF5 here, it will generate an error by itself
  ENDIF()
  # Hide all the HDF5 libs paths
  MARK_AS_ADVANCED(FORCE HDF5_DIR)
  MARK_AS_ADVANCED(FORCE HDF5_C_LIBRARY_dl)
  MARK_AS_ADVANCED(FORCE HDF5_C_LIBRARY_hdf5)
  MARK_AS_ADVANCED(FORCE HDF5_C_LIBRARY_m)
  MARK_AS_ADVANCED(FORCE HDF5_C_LIBRARY_sz)
  MARK_AS_ADVANCED(FORCE HDF5_C_LIBRARY_z)
  MARK_AS_ADVANCED(FORCE HDF5_Fortran_LIBRARY_dl)
  MARK_AS_ADVANCED(FORCE HDF5_Fortran_LIBRARY_hdf5)
  MARK_AS_ADVANCED(FORCE HDF5_Fortran_LIBRARY_hdf5_fortran)
  MARK_AS_ADVANCED(FORCE HDF5_Fortran_LIBRARY_m)
  MARK_AS_ADVANCED(FORCE HDF5_Fortran_LIBRARY_sz)
  MARK_AS_ADVANCED(FORCE HDF5_Fortran_LIBRARY_z)

# Build HDF5 in HOPR
ELSE()
  # Origin pointing to Github
  IF("${GIT_ORIGIN}" MATCHES ".github.com")
    SET (HDF5DOWNLOAD "https://github.com/HDFGroup/hdf5.git")
  ELSE()
    SET (HDF5DOWNLOAD ${LIBS_DLPATH}libs/hdf5.git )
  ENDIF()
  SET (HDF5_DOWNLOAD ${HDF5DOWNLOAD} CACHE STRING "HDF5 Download-link")
  MARK_AS_ADVANCED(FORCE HDF5_DOWNLOAD)

  #SET HDF5_TAG depending on MPI Version
  IF(LIBS_USE_MPI)
    # HDF5 1.12.0 and greater is compatible with OpenMPI 4.0.0 and greater
    EXECUTE_PROCESS(COMMAND mpiexec --version COMMAND grep ^mpiexec COMMAND sed "s/^.* //g" OUTPUT_VARIABLE OPENMPI_VERSION)
    IF (DEFINED OPENMPI_VERSION  AND NOT "${OPENMPI_VERSION}" STREQUAL "")
      IF (${OPENMPI_VERSION} VERSION_GREATER_EQUAL "4.0.0")
        SET (HDF5_TAG "hdf5-1_12_0" CACHE STRING "HDF5 version tag")
      ELSE()
        SET (HDF5_TAG "hdf5-1_10_6" CACHE STRING "HDF5 version tag")
      ENDIF()
    ELSE()
      SET (HDF5_TAG "hdf5-1_10_6" CACHE STRING "HDF5 version tag")
    ENDIF()
  ELSE()
    SET (HDF5_TAG "hdf5-1_12_0" CACHE STRING "HDF5 version tag")
  ENDIF()
  MESSAGE (STATUS "Setting HDF5 to tag ${HDF5_TAG} to be compatible with detected MPI version")
  MARK_AS_ADVANCED(FORCE HDF5_TAG)

  # Set HDF5 build dir
  SET(LIBS_HDF5_DIR  ${LIBS_EXTERNAL_LIB_DIR}/HDF5/build)

  # Check if HDF5 was already build
  IF (NOT EXISTS "${LIBS_HDF5_DIR}/lib/libhdf5.a")
    # Set if HDF5 should be built in parallel
    IF(LIBS_USE_MPI)
      SET(LIBS_HDF5PARALLEL --enable-parallel)
      SET(LIBS_HDF5FC ${MPI_Fortran_COMPILER})
      SET(LIBS_HDF5CC ${MPI_C_COMPILER})
    ELSE()
      UNSET(LIBS_HDF5PARALLEL)
      SET(LIBS_HDF5FC ${CMAKE_Fortran_COMPILER})
      SET(LIBS_HDF5CC ${CMAKE_C_COMPILER} )
    ENDIF()

    # Let CMake take care of download, configure and build
    ExternalProject_Add(HDF5
      GIT_REPOSITORY ${HDF5_DOWNLOAD}
      GIT_TAG ${HDF5_TAG}
      GIT_PROGRESS TRUE
      ${${GITSHALLOW}}
      PREFIX ${LIBS_HDF5_DIR}
      UPDATE_COMMAND ""
      CONFIGURE_COMMAND FC=${LIBS_HDF5FC} CC=${LIBS_HDF5CC} ${LIBS_HDF5_DIR}/src/HDF5/configure --prefix=${LIBS_HDF5_DIR} --with-pic --enable-fortran ${LIBS_HDF5PARALLEL} --libdir=${LIBS_HDF5_DIR}/lib
      BUILD_COMMAND ${MAKE}
    )
    SET(LIBS_HDF5_CMAKE FALSE)

    # CMake HDF5 is fast but not yet reliable. The following section can be enabled once HDF5 promotes the CMake option to stable
    #    ExternalProject_Add(HDF5
    #      GIT_REPOSITORY ${HDF5DOWNLOAD}
    #  GIT_TAG ${HDF5_TAG}
    #  GIT_PROGRESS TRUE
    #  PREFIX ${LIBS_HDF5_DIR}
    #      UPDATE_COMMAND ""
    #  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${LIBS_HDF5_DIR} -DCMAKE_C_COMPILER=${LIBS_HDF5CC} -DCMAKE_Fortran_COMPILER=${LIBS_HDF5FC} -DBUILD-TESTING=OFF -DHDF5_BUILD_EXAMPLES=OFF -DHDF5_BUILD_TOOLS=OFF -DHDF5_BUILD_FORTRAN=ON -DHDF5_ENABLE_PARALLEL=ON
    #      BUILD_COMMAND ${MAKE}
    #    )
    # SET(LIBS_HDF5_CMAKE TRUE)

    LIST(APPEND SELFBUILTEXTERNALS HDF5)
  ENDIF()

  # Set HDF5 paths
  SET(HDF5_C_INCLUDE_DIR                ${LIBS_HDF5_DIR}/include)
  SET(HDF5_DIFF_EXECUTABLE              ${LIBS_HDF5_DIR}/bin/h5diff)
  SET(HDF5_Fortran_INCLUDE_DIR          ${LIBS_HDF5_DIR}/include)
  SET(HDF5_hdf5_LIBRARY_RELEASE         ${LIBS_HDF5_DIR}/lib/libhdf5.a)
  SET(HDF5_hdf5_fortran_LIBRARY_RELEASE ${LIBS_HDF5_DIR}/lib/libhdf5_fortran.a)
  # Unset leftover paths from old CMake runs
  UNSET(HDF5_LIBRARIES)
  UNSET(HDF5_INCLUDE_DIR_FORTRAN)
  UNSET(HDF5_INCLUDE_DIR)
  UNSET(HDF5_DIFF_EXECUTABLE)
  # Add HDF5 path to include directories for linking
  LIST(APPEND HDF5_INCLUDE_DIR_FORTRAN ${HDF5_Fortran_INCLUDE_DIR} ${HDF5_C_INCLUDE_DIR})
  LIST(APPEND HDF5_INCLUDE_DIR  ${HDF5_C_INCLUDE_DIR})
  MARK_AS_ADVANCED(FORCE HDF5_z_LIBRARY_RELEASE)
  # Add ZLIB to include paths for HDF5 data compression
  FIND_LIBRARY(HDF5_z_LIBRARY_RELEASE z)
  LIST(APPEND HDF5_LIBRARIES ${HDF5_hdf5_fortran_LIBRARY_RELEASE} ${HDF5_hdf5_LIBRARY_RELEASE} ${HDF5_z_LIBRARY_RELEASE} -ldl)
ENDIF()

# Actually add the HDF5 paths (system/custom built) to the linking paths
# HDF5 build with CMake
IF(LIBS_HDF5_CMAKE)
  INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR} ${HDF5_INCLUDE_DIR_FORTRAN})
  LIST(APPEND linkedlibs ${HDF5_C_${LIB_TYPE}_LIBRARY} ${HDF5_FORTRAN_${LIB_TYPE}_LIBRARY} )
# HDF5 build with configure
ELSE()
  INCLUDE_DIRECTORIES (${HDF5_INCLUDE_DIR_FORTRAN} ${HDF5_INCLUDE_DIR})
  MESSAGE(STATUS "Found HDF5 Libs: " ${HDF5_LIBRARIES})
  LIST(APPEND linkedlibs ${HDF5_LIBRARIES} )
ENDIF()


# =========================================================================
# LAPACK/MKL library
# =========================================================================
# Check if Intel MKL is requested instead of BLAS/LAPACK
OPTION(LIBS_USE_MKL "Use MKL libraries instead of BLAS/LAPACK" OFF)
IF (LIBS_USE_MKL)
  SET(BLA_VENDOR "Intel10_64lp") #search only for Intel BLAS (=MKL)
ENDIF()

# Use Lapack/Blas for GNU
FIND_PACKAGE(LAPACK QUIET)
IF (LAPACK_FOUND)
  LIST(APPEND linkedlibs ${LAPACK_LIBRARIES})
  MESSAGE(STATUS "Using BLAS/Lapack library")
ENDIF()


# =========================================================================
# CGNS library
# =========================================================================
SET(LIBS_BUILD_CGNS ON CACHE BOOL "Compile and build CGNS library")
SET(LIBS_BUILD_CGNS_INT "32" CACHE STRING "integer type in CGNS lib")
ADD_DEFINITIONS(-DPP_CGNS_INT=${LIBS_BUILD_CGNS_INT})

# Use system CGNS
IF (NOT LIBS_BUILD_CGNS)
  FIND_PACKAGE(CGNS)
  IF (CGNS_FOUND)
    MESSAGE(STATUS "CGNS include dir: " ${CGNS_INCLUDE_DIR})
    LIST(APPEND linkedlibs ${CGNS_LIBRARIES})
    INCLUDE_DIRECTORIES (${CGNS_INCLUDE_DIR})
  ELSE()
    MESSAGE(ERROR "CGNS not found")
  ENDIF()
ELSE()
  SET(LIBS_CGNS_DLDIR ${LIBS_EXTERNAL_LIB_DIR}/CGNS)
  SET(LIBS_CGNS_DIR   ${LIBS_CGNS_DLDIR}/build)

  IF (NOT EXISTS "${LIBS_CGNS_DIR}/lib/libcgns.a")
    STRING(COMPARE EQUAL ${LIBS_BUILD_CGNS_INT} "64" LIBS_CGNS_64BIT)

    # Origin pointing to Github
    IF("${GIT_ORIGIN}" MATCHES ".github.com")
      SET (CGNSDOWNLOAD "https://github.com/CGNS/CGNS.git")
    ELSE()
      SET (CGNSDOWNLOAD ${LIBS_DLPATH}libs/cgns.git )
    ENDIF()

    # Set CGNS_Tag
    SET (LIBS_BUILD_CGNS_TAG "v3.4.1" CACHE STRING "CGNS version tag")

    # CGNS does not need to depend on HDF5, we can build both simultaneously
    EXTERNALPROJECT_ADD(cgns
    GIT_REPOSITORY ${CGNSDOWNLOAD}
    GIT_TAG ${LIBS_BUILD_CGNS_TAG}
    GIT_PROGRESS TRUE
    ${${GITSHALLOW}}
    PREFIX ${LIBS_CGNS_DIR}
    CMAKE_ARGS  -DCMAKE_INSTALL_PREFIX=${LIBS_CGNS_DIR}/build /
      -DCGNS_ENABLE_FORTRAN=ON   -DCGNS_ENABLE_64BIT=${LIBS_CGNS_64BIT} -DCGNS_BUILD_SHARED=OFF -DCGNS_USE_SHARED=OFF /
      -DCMAKE_BUILD_TYPE=Release -DCGNS_BUILD_CGNSTOOLS=OFF -DCGNS_ENABLE_HDF5=OFF -DCGNS_ENABLE_PARALLEL=OFF -DCGNS_ENABLE_TESTS=OFF -DCMAKE_SKIP_RPATH=ON)
    LIST(APPEND SELFBUILTEXTERNALS cgns)
  ENDIF()

  LIST(APPEND linkedlibs ${LIBS_CGNS_DIR}/build/lib/libcgns.a)
  INCLUDE_DIRECTORIES(   ${LIBS_CGNS_DIR}/build/include)
ENDIF()

